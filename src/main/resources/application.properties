spring.main.banner-mode=off
server.servlet.context-path=/veilarbfilter
spring.aop.proxy-target-class=true
management.endpoint.metrics.enabled=true
management.endpoints.web.base-path=/internal
management.endpoints.web.exposure.include=health, prometheus
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
management.endpoint.health.probes.enabled=true
management.endpoint.health.group.liveness.include=livenessState,dataSource
#ENV PROPS -- start
app.env.stsDiscoveryUrl=${SECURITY_TOKEN_SERVICE_DISCOVERY_URL}
app.env.veilarbVeilederUrl=${VEILARBVEILEDERAPI_URL}
app.env.dbUrl=${VEILARBFILTER_DB_URL}
app.env.openAmRefreshUrl=${VEILARBLOGIN_OPENAM_REFRESH_URL}
app.env.openAmDiscoveryUrl=${OPENAM_DISCOVERY_URL}
app.env.openAmClientId=${VEILARBLOGIN_OPENAM_CLIENT_ID}
app.env.abacUrl=${ABAC_PDP_ENDPOINT_URL}
#ENV NAIS -- start
app.env.naisAadDiscoveryUrl=${AZURE_APP_WELL_KNOWN_URL:null}
app.env.naisAadClientId=${AZURE_APP_CLIENT_ID:null}
#ENV NAIS -- end
#ENV PROPS -- end
spring.flyway.enabled=false
# Vi setter opp kobling til database manuelt
spring.data.jdbc.repositories.enabled=false
# Application environment
server.shutdown=graceful
server.port=8080